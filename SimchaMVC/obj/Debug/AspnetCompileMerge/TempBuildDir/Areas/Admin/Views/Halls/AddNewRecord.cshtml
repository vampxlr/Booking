@model SimchaMVC.hall

@{
    var slist = ViewBag.ServiceAreaSelectList as IQueryable<SelectListItem>;
    var elist = ViewBag.EventTypesSelectList as IQueryable<SelectListItem>;
    var halladminlist = ViewBag.halladminlist as IQueryable<SelectListItem>;
    
    ViewBag.Title = "Halls";
    Layout = "~/Areas/Admin/Views/Shared/_DashboardLayout.cshtml";
    var user_name = WebSecurity.CurrentUserName;
}

<div class="well bs-component">
    <div class="row">
        <div class="col-md-6">

            @using (Html.BeginForm("AddNewRecord", "Halls", FormMethod.Post, new { @class = "form-horizontal" }))
            {
                if (ViewBag.isPost)
                {
                    <h4 style="background-color:orangered;color:white; display:block; padding :15px;border-radius:5px">@ViewBag.Error</h4>

                }


                @Html.AntiForgeryToken()
                @Html.Hidden("user_name", user_name)
    <fieldset>
        <legend>Add New Hall</legend>

        @if (halladminlist != null && (User.IsInRole("SuperAdmin") && halladminlist.Count() != 0))
        {
            <div class="form-group">
                @Html.Label("Assigned to Hall Admin", new { @class = "col-lg-2 control-label" })
                <div class="col-lg-10">
                    @Html.DropDownList("admin_user_id", halladminlist, new { @class = "form-control" })
                </div>
            </div>

        }
        else
        {
            @Html.Hidden("admin_user_id", WebSecurity.CurrentUserId)
        }


        <div class="form-group">
            @Html.Label("Hall Name", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.hall_name, new { @class = "form-control", @data_bind = "event: { afterkeydown: check}, value: username, valueUpdate: 'afterkeydown', css:{'error':(!username.isValid() && showErrors()) , 'success':username.isValid()}" })

            </div>
        </div>
        <div class="form-group">
            @Html.Label("Contact Name", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.contact_name, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Address", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.address1, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Address 2", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.address2, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("City", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.city, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("State", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.state, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Zip Code", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.zip_code, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Service Area", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.ListBox("service_area_id", slist, new { multiple = "", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Event Type", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.ListBox("event_type_id", elist, new { multiple = "", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Phone", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.phone, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Phone 2", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.phone2, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Fax", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.fax, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Capacity", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(m => m.capacity, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Features", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @(Html.Kendo().Editor()
                                          .Name("editor")
                                         .Name("features")

                )
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Policies", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @(Html.Kendo().Editor()
                                          .Name("editor")


                                                                                                      .Name("policies")

                )
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Preferred Contact Method", new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.DropDownListFor(m => m.preferred_contact_method,
                           new List<SelectListItem> {
                                                                 new SelectListItem { Text = "Phone 1", Value = "Phone 1"},
                                                                 new SelectListItem { Text = "Phone 2", Value = "Phone 2"},
                                                                 new SelectListItem { Text = "Email", Value = "Email"},
                            }
                            , new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-lg-10 col-lg-offset-2">
                <a href=@Url.Action("index") class="btn btn-default">Cancel</a>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </fieldset>
            }
        </div>
    </div>
</div>

<style>
    .error {
    background-color:#ff8a37;
    }
    .success {
    background-color:#afff35;
    }
</style>



<script>
    $(".active").removeClass("active");
    $("a:contains('@ViewBag.Title')").parents("li").addClass("active");

</script>

<input type="text" data-bind="value: username, valueUpdate: 'afterkeydown', css:{'error':(!username.isValid() && showErrors()) , 'success':username.isValid()}" />
<br />
<button data-bind="click: check">Submit</button>
<div data-bind="visible: showErrors, text: errors" />

<script>

    function ViewModel() {
        var self = this;
        self.username = ko.observable().extend({
            required: true
        });
        self.showErrors = ko.observable(false);

        self.check = function () {
            self.showErrors(true);
            if (self.isValid()) {
                // save data here   
            }
        }

        self.errors = ko.validation.group(self);
    }

    ko.validation.init({
        registerExtenders: true,
        messagesOnModified: true,
        insertMessages: false
    });

    ko.applyBindings(new ViewModel());
</script> 