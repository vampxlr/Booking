@model SimchaMVC.hall

@{
    ViewBag.Title = "Halls";
    ViewBag.SubTitle = "Calendar";
    Layout = "~/Areas/Admin/Views/Halls/_SubHallsCalenderLayout.cshtml";
}


<script>
    var IsEnableBooking=true;

</script>
<script>
    function CheckEnableBooking()
    {
        if(IsEnableBooking){
            $("a:contains('Create Booking')").removeAttr('disabled','disabled');

        }
        else
        {
            $("a:contains('Create Booking')").attr('disabled','disabled');



        }
    }




</script>
@*<div style="font-size:16px; font-weight:bold;" align="center">@Model.hall_name</div>*@

<div class="row">
    <div class="col-md-5">
        <div class="demo-section" style="display:none;">
            <div id="special-days">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
    <div class="col-md-7 ">


        <div id="gridbox">
            <div style="display:none;" id="gridBook"></div>
            <script type="text/x-kendo-template" id="template">
                <div class="toolbar">

                    <button id="addbooking" class="btn btn-default btn-sm">Create Booking</button>
                </div>
            </script>

            <script>
                loadBookingsGrid();
                function loadBookingsGrid(bookings) {


                    $("#gridBook").kendoGrid({
                        dataSource: {
                            data: bookings,
                            schema: {
                                model: {
                                    fields: {
                                        booking_id: { type: "number" },
                                        hall_name: { type: "string" },
                                        time_slot: { type: "string" },
                                        user_infromation: { type: "string" },
                                        fullbooking_url: { type: "string" },
                                        booking_date: { type: "string" },
                                        delete_booking: {stype:"string"}
                                    }
                                }
                            },
                            pageSize: 20
                        },
                        toolbar: kendo.template($("#template").html()),
                        selectable: "multiple",
                        height: 289,

                        pageable: {
                            refresh: true,
                            pageSizes: true,
                            buttonCount: 5
                        },
                        columns: [{
                            field: "booking_id",
                            title: "Booking Id"
                        }, {
                            field: "hall_name",
                            title: "Hall Name"
                        },
                        {
                            field: "time_slot",
                            title: "Time Slot"
                        },
                        {
                            field: "user_infromation",
                            title: "User"
                        }, {
                            field: "booking_date",
                            title: "Date :"
                        }, {
                            field: "fullbooking_url",
                            title: "View / Edit :",
                            template: '<a class="btn btn-default btn-xs" href="/Admin/Bookings/Edit/#=fullbooking_url#?returnUrl=@Request.Url.ToString()">View / Edit</a>',
                            width:"100px"
                        },
                        {
                            field: "fullbooking_url",
                            title: "Cancel :",
                            template: '<a class="btn btn-default btn-xs" href="/Admin/Bookings/Cancel/#=fullbooking_url#">Cancel</a>',
                            width:"70px"
                        }

                        ]
                    }
                    );

                }



            </script>
        </div>
        <div id="gridbox">
            <div style="display:none;" id="gridTime"></div>
            <script type="text/x-kendo-template" id="templateTime">
                <div class="toolbar">

                    <button id="addtime" class="btn btn-default btn-sm">Add New Slot</button>
                    <button id="edittime" class="btn btn-default btn-sm">Special Add / Edit Slot</button>
                </div>
            </script>

            <script>
                loadTimeSlotGrid();
                function loadTimeSlotGrid(timeslots) {


                    $("#gridTime").kendoGrid({
                        dataSource: {
                            data: timeslots,
                            schema: {
                                model: {
                                    fields: {
                                        id: { type: "number" },

                                        hall_id: { type: "string" },
                                        time_slot: { type: "string" },
                                        date: { type: "string" }

                                    }
                                }
                            },
                            pageSize: 20
                        },
                        selectable: "multiple",
                        height: 289,
                        toolbar: kendo.template($("#templateTime").html()),
                        pageable: {
                            refresh: true,
                            pageSizes: true,
                            buttonCount: 5
                        },
                        columns: [{
                            field: "id",
                            title: "Id",
                            width:"50px"
                        }, {
                            field: "time_slot",
                            title: "Time Slot",
                            width:"150px"
                        },{
                            field: "disabled",
                            title: "is Disabled",
                            width:"80px"
                        },{
                            field: "date",
                            title: "Date :",
                            width:"80px"
                        }, {
                            field: "time_slot_id",
                            title: "Create Booking :",
                            template: '<a class="btn btn-default btn-xs" href="/Admin/bookings/CreateBooking?hall_id=#=hall_id#&returnUrl=@Request.Url.ToString()&event_date=#=date#">Create Booking</a>',
                            width:"150px"
                        }

                        ]
                    }
                    );
                    CheckEnableBooking();
                }



            </script>
        </div>

    </div>
</div>



<!-- Button trigger modal -->
<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="myModalLabel">Choose an option</h4>
            </div>
            <div class="modal-body">
                <div class="disableDate">
                    Do you want to Enable/Disable Date ? <br />
                    <br />
                    <button data-dismiss="modal" id="disableDate" class="btn btn-success btn-sm"><p style="margin:0">Disable Date</p></button><br />

                    <br />  

                </div>
               
                <div style="display:none" id="ViewBooking">

                    Do you want to add/edit Booking Records ? <br /> <br />
                    <button data-dismiss="modal" id="BookingRecords" class="btn btn-primary btn-sm">Veiw / Edit Bookings</button><br /> <br />
                    Do you want to add/edit Time Slots?
                    <br />
                    <br />
                </div>

                <button id="timeslots" data-dismiss="modal" class="btn btn-primary btn-sm">Edit Time Slots</button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default btn-sm" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>
                                    

<script>
    //onclick disable dates

    function disableEnableDate(dateString,hall_id){

        $("#disableDate").unbind( "click");
        $("#disableDate").click(function(){
            console.log("inside click event");
            console.log(dateString);
            var deleteOrEnableDate = {
                booking_date: dateString,
                hall_id:hall_id
            };
            $(".demo-section").hide('slow');
            $.post(url + "/api/webapi/DeletBookingRecord", deleteOrEnableDate, function (data) {


            }).done(function(data){
                console.log("Disable Enable Operation Performed");
                console.log(data);
                GetNewDisabledDates();
            });



        })

    }
    //onclick load bookings

    function loadBookingRecords(dateString,hall_id){

        $("#BookingRecords").unbind("click");
        $("#BookingRecords").click(function(){
            console.log("inside click event");
            console.log(dateString);
            var LoadBookingRecords = {

                hall_id:hall_id,
                date: dateString
            };
            $("#addbooking").unbind("click");
            $("#addbooking").click(function(){
                var encodedstr = encodeURIComponent(dateString);
                console.log(encodedstr);
                console.log(encodeURIComponent(dateString));
                window.location = "/Admin/bookings/Createbooking?returnUrl=@Request.Url.ToString()&hall_id="+hall_id+"&event_date="+encodedstr;
            });
            $("#gridTime").hide();
            $("#gridBook").show();
            console.log("loadbooking post date");
            console.log(LoadBookingRecords);
            $.post(url + "/api/webapi/GetBookingRecordWithHallIdAndDate", LoadBookingRecords, function (data) {


            }).done(function(data){
                console.log("Booking load Operation Performed");
                console.log(data);
                loadBookingsGrid(data);
                $("td:contains(true)").parents("tr").css("text-decoration","line-through");
            });



        })

    }
    //onclick load timeSlots

    function loadTimeSlotsRecords(dateString,hall_id){

        $("#timeslots").unbind("click");
        $("#timeslots").click(function(){
            console.log("inside click event");
            console.log(dateString);
            var LoadTimeSlotsRecords = {

                hall_id:hall_id,
                date: dateString
            };

            $("#addtime").unbind("click");
            $("#addtime").click(function(){

                window.location = "/Admin/halls/timeslots/"+hall_id+"?returnUrl=@Request.Url.ToString()";
            });
            $("#edittime").unbind("click");
            $("#edittime").click(function(){

                window.location = "/Admin/Halls/SpecialTimeSlots?hall_id= "+hall_id+"&date="+dateString;
            });
            $("#gridBook").hide();
            $("#gridTime").show();
            console.log("LoadTimeSlotsRecords post date");
            console.log(LoadTimeSlotsRecords);
            $.post(url + "/api/webapi/GetTimeSlotsForHallCalender", LoadTimeSlotsRecords, function (data) {


            }).done(function(data){
                console.log("Booking load Operation Performed");
                console.log(data);
                loadTimeSlotGrid(data);
                $("td:contains(true)").parents("tr").css("text-decoration","line-through");
            });



        })

    }


    //refresh dates

    function GetNewDisabledDates(){

        $.getJSON(url + "/api/webapi/GetDisabledAndBookingDates/"+@Model.id, function (data) {



        }).done(function (data) {
            var items = [[]];
            items[0] = [];
            items[1] = [];
            $.each(data[1], function (key, val) {
                items[1].push(+new Date(val.disabled_date));
            });
            $.each(data[0], function (key, val) {
                items[0].push(+new Date(val.booking_date));
            });
            console.log(data);
            $(".demo-section").show('pulsate');
            updateCalender(items, data);
        });

    }



</script>





<script>

    function updateCalender(items,data){
        var  calendar = $("#calendar").data("kendoCalendar");

        calendar.destroy();
        $( "#calendar" ).remove();
        $("#special-days").append("<div id='calendar'></div>");

        $("#calendar").kendoCalendar({
            //value: new Date(data[1][0].disabled_date),
            value: new Date(),
            dates: items,
            change: onChange,
            navigate: onNavigate,
            month: {
                // template for dates in month view
                content: "# if ($.inArray(+data.date, dates[1]) != -1) { #" +
                                    "<div class='" +

                                    "disabled" +

                             "'>#= data.value #   #= convertHebrew(convertGerToHeb(data.date).day) #<span class='" +
                            "glyphicon glyphicon-remove"+
                             "'></span> </div>" +
                        "# } else if ($.inArray(+data.date, dates[0]) != -1) {function same(element) {return element == +data.date;} var filtered = dates[0].filter(same);var count = filtered.length; #" +
                                    "<div class='" +

                                    "booked" +

                             "'>" +
                              " <span class='" +
                            "" +
                             "'></span> " +
                             "#= data.value #   #= convertHebrew(convertGerToHeb(data.date).day) #<div class='count'> #= count #</div> </div>" +
                        "# } else { #" +
                        "#= data.value #   #= convertHebrew(convertGerToHeb(data.date).day) #" +
                        "# } #"
            },
            footer: false
        });
        $(".demo-section").show('slow');
    }
    function success(items, data) {
        var today = new Date(data[1][0]);
        console.log(items);
        console.log(data);
        $("#calendar").kendoCalendar({
            //  value: new Date(data[1][0].disabled_date),
            value: new Date(),
            dates: items,
            change: onChange,
            navigate: onNavigate,
            month: {
                // template for dates in month view
                content: "# if ($.inArray(+data.date, dates[1]) != -1) { #" +
                                    "<div class='" +

                                    "disabled" +

                             "'>#= data.value #   #= convertHebrew(convertGerToHeb(data.date).day) # <span class='" +
                            "glyphicon glyphicon-remove"+
                             "'></span> </div>" +
                        "# } else if ($.inArray(+data.date, dates[0]) != -1) {function same(element) {return element == +data.date;} var filtered = dates[0].filter(same);var count = filtered.length; #" +
                                    "<div class='" +

                                    "booked" +

                             "'>" +
                              " <span class='" +
                            "" +
                             "'></span> " +
                             " #= data.value #   #= convertHebrew(convertGerToHeb(data.date).day) #<div class='count'> #= count #</div> </div>" +
                        "# } else { #" +
                        "#= data.value #   #= convertHebrew(convertGerToHeb(data.date).day) #" +
                        "# } #"
            },
            footer: false
        });



    }

</script>


<script>
    function GetBookingRecordsWithHallIdAndDate(date,id){

        var dateAndId = { booking_date: dateString,
            hall_id: id  };
        console.log(date);

        $.post(url + "/api/webapi/GetBookingRecordWithHallIdAndDate", dateAndId, function (data) {
            console.log("data loaded");
            console.log(data);
            loadGrid(data);
        }).done(function(data){
            loadBookingsGrid(data);
        });

    }
    $(document).ready(function () {

        $.getJSON(url + "/api/webapi/GetDisabledAndBookingDates/"+@Model.id, function (data) {



        }).done(function (data) {
            var items = [[]];
            items[0] = [];
            items[1] = [];
            $.each(data[1], function (key, val) {
                items[1].push(+new Date(val.disabled_date));
            });
            $.each(data[0], function (key, val) {
                items[0].push(+new Date(val.booking_date));
            });
            console.log(data);
            $(".demo-section").show('slow');
            success(items, data);
        });




    })

    function GetModal(date,hall_id){

        var dateAndId = { date: date,
            hall_id: hall_id  };

        $.post(url + "/api/webapi/IsDisabled", dateAndId, function (data) {

        }).done(function(data){

            if(data==true){
               
                $("#disableDate").removeClass("btn-success");
                $("#disableDate").addClass("btn-danger");
                $("#disableDate p").replaceWith("<p style='margin:0;'>Disable Date</p>");
                $("#ViewBooking").show('slow');
                console.log("disable/enable--true");
                IsEnableBooking=true;
            }
            else if(data==false){
                $("#disableDate").removeClass("btn-danger");
                $("#disableDate").addClass("btn-success");
                $("#disableDate p").replaceWith("<p style='margin:0;'>Enable Date</p>");
                $("#ViewBooking").hide('slow');
                IsEnableBooking=false;
                console.log("disable/enable--false");

            }




        });




        $.post(url + "/api/webapi/IsBooked", dateAndId, function (data) {

        }).done(function(data){

            if(data==true) {
                $(".disableDate").hide('slow');

            }
            else if(data==false) {
                $(".disableDate").show('slow');


            }




        });


        loadBookingRecords(date,hall_id)
        disableEnableDate(date,hall_id);
        loadTimeSlotsRecords(date,hall_id)
        $('#myModal').modal();
        console.log("getting modal");
    }

    function onChange() {
        var hall_id=  @Model.id;
        var dateString = kendo.toString(this.value(), 'd');
        var date = { booking_date: dateString };
        console.log(date);
        GetModal(dateString,hall_id);

        var deleteOrEnableDate = {
            booking_date: dateString,
            hall_id:hall_id
        };




    }

    function onNavigate() {
        
        var view = this.view();
        if (view.name == "month") {
            ChangeTitle();
        }
    }

    function counts(arr, counts) {

        for (var i = 0; i < arr.length; i++) {
            var num = arr[i];
            counts[num] = counts[num] ? counts[num] + 1 : 1;
        }
        return counts;
    }


    //  function same(element) {return element == 5;} var filtered = [12, 5, 8, 130, 44, 5].filter(same);var count = filterd.length;


</script>




<style scoped>
      .count {
        float: right;
        margin-right: 3px;
        font-size: 8px;

    }
     .demo-section {
     }

    #special-days {
        /*background: url('../../../../Content/web/calender.jpg') transparent no-repeat 0 bottom;*/
    }

    #calendar {
        margin: 0 auto;
        width: 400px;
        text-align: center;
    }

    #calendar tbody {
    }

    .k-widget {
    }

    .k-calendar {
    }

    /*#calendar,
                #calendar .k-content,
                #calendar .k-header,
                #calendar th,
                #calendar .k-link,
                #calendar .k-state-hover,
                #calendar .k-state-selected,
                #calendar .k-state-focused {
                    background: transparent;
                    border-color: transparent;
                    color: #fff;
                    box-shadow: none;
                }

            #calendar .k-content .k-state-hover,
                    #calendar .k-content .k-state-focused {
                        font-size: 14px;
                        font-weight: bold;
                    }*/

    #calendar .k-state-selected, #calendar .k-state-selected.k-state-focused {
        /*font-size: 15px;*/
        font-weight: bold;
    }

    #calendar .k-content .k-link {
        padding: 0;
        min-height: 32px;
        line-height: 32px;
    }

    #calendar th {
        padding-top: 22px;
        color: #8cbabf;
    }

    #calendar td.k-other-month .k-link {
        color: #8cbabf;
    }

    #calendar th,
    #calendar td {
        text-align: center;
    }

    /*.exhibition, .party, .cocktail {
                width: 40px;
                height: 40px;
                margin: auto;
                -webkit-border-radius: 100px;
                -moz-border-radius: 100px;
                border-radius: 50%;
                line-height: 40px;
        }*/

    .disabled {
        background-color: #F73948;
;
        color: #ffffff;
    }

    .disabled em, em {
        font-style: italic;
        font-size: smaller;
    }

    .booked {
        height: 32px;
        background-color: #62d733;
        color: #ffffff;
    }

    .k-block, .k-button, .k-textbox, .k-drag-clue, .k-touch-scrollbar, .k-window, .k-window-titleless .k-window-content, .k-window-action, .k-inline-block, .k-grid .k-filter-options, .k-grouping-header .k-group-indicator, .k-autocomplete, .k-multiselect, .k-combobox, .k-dropdown, .k-dropdown-wrap, .k-datepicker, .k-timepicker, .k-colorpicker, .k-datetimepicker, .k-notification, .k-numerictextbox, .k-picker-wrap, .k-numeric-wrap, .k-colorpicker, .k-list-container, .k-calendar-container, .k-calendar td, .k-calendar .k-link, .k-treeview .k-in, .k-editor-inline, .k-tooltip, .k-tile, .k-slider-track, .k-slider-selection, .k-upload {
        border-radius: 0px;
    }

    #grid {
    }
</style>

<script>
    $(".active").removeClass("active");
    $("a:contains('@ViewBag.Title')").parents("li").addClass("active");
    $("a:contains('@ViewBag.Subtitle')").addClass("active");
    $("a:contains('@ViewBag.Subtitle')").parents("li").addClass("active");

</script>
<script>

    function convertHebrew(data) {

        switch(data) {
            case 1:
                return "א";
                break;
            case 2:
                return "ב";
                break;
            case 3:
                return "ג";
                break;
            case 4:
                return "ד";
                break;
            case 5:
                return "ה";
                break;
            case 6:
                return "ו";
                break;
            case 7:
                return "ז";
                break;
            case 8:
                return "ח";
                break;
            case 9:
                return "ט";
                break;
            case 10:
                return "י";
                break;

            case 11:
                return "יא";
                break;
            case 12:
                return "יב";
                break;
            case 13:
                return "יג";
                break;
            case 14:
                return "יד";
                break;
            case 15:
                return "יה";
                break;
            case 16:
                return "יו";
                break;
            case 17:
                return "יז";
                break;
            case 18:
                return "יח";
                break;
            case 19:
                return "יט";
                break;
            case 20:
                return "כ";
                break;

            case 21:
                return "כא";
                break;
            case 22:
                return "כב";
                break;
            case 23:
                return "כג";
                break;
            case 24:
                return "כד";
                break;
            case 25:
                return "כה";
                break;
            case 26:
                return "כו";
                break;
            case 27:
                return "כז";
                break;
            case 28:
                return "כח";
                break;
            case 29:
                return "כט";
                break;
            case 30:
                return "ל";
                break;
            case 31:
                return "לא";
                break;


            default:
                return "~";
        }

    }

</script>


<script language="JavaScript">





    /*
         *      This script was adapted from C sources written by
         *      Scott E. Lee, which contain the following copyright notice:
         *
         *      Copyright 1993-1995, Scott E. Lee, all rights reserved.
         *      Permission granted to use, copy, modify, distribute and sell so long as
         *      the above copyright and this permission statement are retained in all
         *      copies.  THERE IS NO WARRANTY - USE AT YOUR OWN RISK.
         *
         *      Bill Hastings
         *      RBI Software Systems
         *      bhastings@rbi.com
         */
    var GREG_SDN_OFFSET = 32045,
        DAYS_PER_5_MONTHS = 153,
        DAYS_PER_4_YEARS = 1461,
        DAYS_PER_400_YEARS = 146097;
    var HALAKIM_PER_HOUR = 1080,
        HALAKIM_PER_DAY = 25920,
        HALAKIM_PER_LUNAR_CYCLE = ((29 * HALAKIM_PER_DAY) + 13753),
        HALAKIM_PER_METONIC_CYCLE = (HALAKIM_PER_LUNAR_CYCLE * (12 * 19 + 7));
    var HEB_SDN_OFFSET = 347997,
        NEW_MOON_OF_CREATION = 31524,
        NOON = (18 * HALAKIM_PER_HOUR),
        AM3_11_20 = ((9 * HALAKIM_PER_HOUR) + 204),
        AM9_32_43 = ((15 * HALAKIM_PER_HOUR) + 589);
    var SUN = 0,
        MON = 1,
        TUES = 2,
        WED = 3,
        THUR = 4,
        FRI = 5,
        SAT = 6;
    var today = null,
        hebrewMonth = 0,
        hebrewDate = 0,
        hebrewYear = 0,
        metonicCycle = 0,
        metonicYear = 0,
        moladDay = 0,
        moladHalakim = 0;
    var gWeekday = new weekdayarr("Sun","Mon","Tues","Wednes","Thurs","Fri","Satur");
    var gMonth = new gregmontharr("January","February","March","April","May","June","July","August","September","October","November","December");
    var hMonth = new hebrewmontharr("Tishri","Heshvan","Kislev","Tevet","Shevat","AdarI","AdarII","Nisan","Iyyar","Sivan","Tammuz","Av","Elul");
    var mpy = new monthsperyeararr(12,12,13,12,12,13,12,13,12,12,13,12,12,13,12,12,13,12,13);

    function weekdayarr(d0,d1,d2,d3,d4,d5,d6)
    {
        this[0] = d0; this[1] = d1; this[2] = d2; this[3] = d3;
        this[4] = d4; this[5] = d5; this[6] = d6;
    }

    function gregmontharr(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11)
    {
        this[0] = m0; this[1] = m1; this[2] = m2; this[3] = m3;
        this[4] = m4; this[5] = m5; this[6] = m6; this[7] = m7;
        this[8] = m8; this[9] = m9; this[10] = m10; this[11] = m11;
    }

    function hebrewmontharr(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13)
    {
        this[0] = m0; this[1] = m1; this[2] = m2; this[3] = m3;
        this[4] = m4; this[5] = m5; this[6] = m6; this[7] = m7;
        this[8] = m8; this[9] = m9; this[10] = m10; this[11] = m11;
        this[12] = m12; this[13] = m13;
    }

    function monthsperyeararr(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,
        m10,m11,m12,m13,m14,m15,m16,m17,m18)
    {
        this[0] = m0; this[1] = m1; this[2] = m2; this[3] = m3;
        this[4] = m4; this[5] = m5; this[6] = m6; this[7] = m7;
        this[8] = m8; this[9] = m9; this[10] = m10; this[11] = m11;
        this[12] = m8; this[13] = m13; this[14] = m14; this[15] = m15;
        this[16] = m16; this[17] = m17; this[18] = m18;
    }
    function getToday()
    {
        if(today == null)
            today = new Date();
    }
    function displayWeekday()
    {
        getToday();
        document.writeln(gWeekday[today.getDay()] + "day");
    }
    function displayGregorianDate()
    {
        getToday();
        document.writeln(gMonth[today.getMonth()] + " " + today.getDate() + ", " + today.getFullYear());
    }
    function displayHebrewDate()
    {
        if(hebrewDate != 0 && hebrewMonth != 0 && hebrewYear != 0)
            //  console.log(hebrewDate + " " + hMonth[hebrewMonth - 1] + " " + hebrewYear);
            var retdate = {
                day: hebrewDate,
                month: hMonth[hebrewMonth - 1],
                year: hebrewYear
            };
        return retdate;
    }
    function GregorianToSdn(inputYear,inputMonth,inputDay)
    {
        var year = 0,
            month = 0,
            sdn;
        getToday();
        // Make year a positive number
        if (inputYear < 0)
            year = inputYear + 4801;
        else
            year = inputYear + 4800;
        // Adjust the start of the year
        if (inputMonth > 2) {
            month = inputMonth - 3;
        }
        else {
            month = inputMonth + 9;
            year--;
        }
        sdn      = Math.floor((Math.floor(year / 100) * DAYS_PER_400_YEARS) / 4);
        sdn += Math.floor(((year % 100) * DAYS_PER_4_YEARS) / 4);
        sdn += Math.floor((month * DAYS_PER_5_MONTHS + 2) / 5);
        sdn += inputDay - GREG_SDN_OFFSET;
        return sdn;
    }
    function SdnToHebrew(sdn)
    {
        var inputDay,
            tishri1 = 0,
            tishri1After = 0,
            yearLength = 0,
            inputDay = sdn - HEB_SDN_OFFSET;
        FindTishriMolad(inputDay);
        tishri1 = Tishri1(metonicYear,moladDay,moladHalakim);
        if (inputDay >= tishri1) {
            // It found Tishri 1 at the start of the year.
            hebrewYear = metonicCycle * 19 + metonicYear + 1;
            if (inputDay < tishri1 + 59) {
                if (inputDay < tishri1 + 30) {
                    hebrewMonth = 1;
                    hebrewDate = inputDay - tishri1 + 1;
                }
                else {
                    hebrewMonth = 2;
                    hebrewDate = inputDay - tishri1 - 29;
                }
                return;
            }
            // We need the length of the year to figure this out,so find Tishri 1 of the next year.
            moladHalakim += HALAKIM_PER_LUNAR_CYCLE * mpy[metonicYear];
            moladDay += Math.floor(moladHalakim / HALAKIM_PER_DAY);
            moladHalakim = moladHalakim % HALAKIM_PER_DAY;
            tishri1After = Tishri1((metonicYear + 1) % 19,moladDay,moladHalakim);
        }
        else {
            // It found Tishri 1 at the end of the year.
            hebrewYear = metonicCycle * 19 + metonicYear;
            if (inputDay >= tishri1 - 177) {
                // It is one of the last 6 months of the year.
                if (inputDay > tishri1 - 30) {
                    hebrewMonth = 13;
                    hebrewDate = inputDay - tishri1 + 30;
                }
                else if (inputDay > tishri1 - 60) {
                    hebrewMonth = 12;
                    hebrewDate = inputDay - tishri1 + 60;
                }
                else if (inputDay > tishri1 - 89) {
                    hebrewMonth = 11;
                    hebrewDate = inputDay - tishri1 + 89;
                }
                else if (inputDay > tishri1 - 119) {
                    hebrewMonth = 10;
                    hebrewDate = inputDay - tishri1 + 119;
                }
                else if (inputDay > tishri1 - 148) {
                    hebrewMonth = 9;
                    hebrewDate = inputDay - tishri1 + 148;
                }
                else {
                    hebrewMonth = 8;
                    hebrewDate = inputDay - tishri1 + 178;
                }
                return;
            }
            else {
                if (mpy[(hebrewYear - 1) % 19] == 13) {
                    hebrewMonth = 7;
                    hebrewDate = inputDay - tishri1 + 207;
                    if (hebrewDate > 0)
                        return;
                    hebrewMonth--;
                    hebrewDate += 30;
                    if (hebrewDate > 0)
                        return;
                    hebrewMonth--;
                    hebrewDate += 30;
                }
                else {
                    hebrewMonth = 6;
                    hebrewDate = inputDay - tishri1 + 207;
                    if (hebrewDate > 0)
                        return;
                    hebrewMonth--;
                    hebrewDate += 30;
                }
                if (hebrewDate > 0)
                    return;
                hebrewMonth--;
                hebrewDate += 29;
                if (hebrewDate > 0)
                    return;
                // We need the length of the year to figure this out,so find Tishri 1 of this year.
                tishri1After = tishri1;
                FindTishriMolad(moladDay - 365);
                tishri1 = Tishri1(metonicYear,moladDay,moladHalakim);
            }
        }
        yearLength = tishri1After - tishri1;
        moladDay = inputDay - tishri1 - 29;
        if (yearLength == 355 || yearLength == 385) {
            // Heshvan has 30 days
            if (moladDay <= 30) {
                hebrewMonth = 2;
                hebrewDate = moladDay;
                return;
            }
            moladDay -= 30;
        }
        else {
            // Heshvan has 29 days
            if (moladDay <= 29) {
                hebrewMonth = 2;
                hebrewDate = moladDay;
                return;
            }
            moladDay -= 29;
        }
        // It has to be Kislev.
        hebrewMonth = 3;
        hebrewDate = moladDay;
    }
    function FindTishriMolad(inputDay)
    {
        // Estimate the metonic cycle number.  Note that this may be an under
        // estimate because there are 6939.6896 days in a metonic cycle not
        // 6940,but it will never be an over estimate.   The loop below will
        // correct for any error in this estimate.
        metonicCycle = Math.floor((inputDay + 310) / 6940);
        // Calculate the time of the starting molad for this metonic cycle.
        MoladOfMetonicCycle();
        // If the above was an under estimate,increment the cycle number until
        // the correct one is found.  For modern dates this loop is about 98.6%
        // likely to not execute,even once,because the above estimate is
        // really quite close.
        while (moladDay < inputDay - 6940 + 310) {
            metonicCycle++;
            moladHalakim += HALAKIM_PER_METONIC_CYCLE;
            moladDay += Math.floor(moladHalakim / HALAKIM_PER_DAY);
            moladHalakim = moladHalakim % HALAKIM_PER_DAY;
        }
        // Find the molad of Tishri closest to this date.
        for (metonicYear = 0; metonicYear < 18; metonicYear++) {
            if (moladDay > inputDay - 74)
                break;
            moladHalakim += HALAKIM_PER_LUNAR_CYCLE * mpy[metonicYear];
            moladDay += Math.floor(moladHalakim / HALAKIM_PER_DAY);
            moladHalakim = moladHalakim % HALAKIM_PER_DAY;
        }
    }
    function MoladOfMetonicCycle()
    {
        var r1,r2,d1,d2;
        // Start with the time of the first molad after creation.
        r1 = NEW_MOON_OF_CREATION;
        // Calculate gMetonicCycle * HALAKIM_PER_METONIC_CYCLE.  The upper 32
        // bits of the result will be in r2 and the lower 16 bits will be in r1.
        r1 += metonicCycle * (HALAKIM_PER_METONIC_CYCLE&0xFFFF);
        r2 = r1 >> 16;
        r2 += metonicCycle * ((HALAKIM_PER_METONIC_CYCLE >> 16)&0xFFFF);
        // Calculate r2r1 / HALAKIM_PER_DAY.  The remainder will be in r1,the
        // upper 16 bits of the quotient will be in d2 and the lower 16 bits
        // will be in d1.
        d2 = Math.floor(r2 / HALAKIM_PER_DAY);
        r2 -= d2 * HALAKIM_PER_DAY;
        r1 = (r2 << 16) | (r1&0xFFFF);
        d1 = Math.floor(r1 / HALAKIM_PER_DAY);
        r1 -= d1 * HALAKIM_PER_DAY;
        moladDay = (d2 << 16) | d1;
        moladHalakim = r1;
    }
    function Tishri1(metonicYear,moladDay,moladHalakim)
    {
        var tishri1 = moladDay;
        var dow = tishri1 % 7;
        var leapYear =  metonicYear == 2 || metonicYear == 5 || metonicYear == 7 || metonicYear == 10 ||
            metonicYear == 13 || metonicYear == 16 || metonicYear == 18;
        var lastWasLeapYear =   metonicYear == 3 || metonicYear == 6 || metonicYear == 8 || metonicYear == 11 ||
            metonicYear == 14 || metonicYear == 17 || metonicYear == 0;
        // Apply rules 2,3 and 4
        if ((moladHalakim >= NOON) ||
        ((!leapYear) && dow == TUES && moladHalakim >= AM3_11_20) ||
        (lastWasLeapYear && dow == MON && moladHalakim >= AM9_32_43))
        {
            tishri1++;
            dow++;
            if (dow == 7)
                dow = 0;
        }
        // Apply rule 1 after the others because it can cause an additional delay of one day.
        if (dow == WED || dow == FRI || dow == SUN) {
            tishri1++;
        }
        return tishri1;
    }
    //      end hiding contents from old browsers  -->
    //var date = new Date();
    //  SdnToHebrew(GregorianToSdn(date.getFullYear(), date.getMonth() + 1, date.getDate()));
    // displayHebrewDate();
</script>

<script>

    function convertGerToHeb(date) {
        SdnToHebrew(GregorianToSdn(date.getFullYear(), date.getMonth() + 1, date.getDate()));
        return displayHebrewDate();

    }

</script>

<script>
    function getMonthFromString(mon) {
        return new Date(Date.parse(mon + " 1, 2012")).getMonth() + 1
    }

    function getNumberOfDaysString(mon) {
        return new Date(2008, mon, 0).getDate();
    }

    function getHebMonths(monthYear) {

        var monthYearArray = monthYear.split(" ");
        var monthNumber = getMonthFromString(monthYearArray[0]);
        var yearNumber = monthYearArray[1];
        var maxDate = getNumberOfDaysString(monthNumber);
        var minDate = 1;

        var retString = monthYear+ " ";

        var minHebMonth = convertGerToHeb(new Date(yearNumber, monthNumber -1, minDate)).month;
        var maxHebMonth = convertGerToHeb(new Date(yearNumber, monthNumber-1, maxDate)).month;

        var minHebYear = convertGerToHeb(new Date(yearNumber, monthNumber-1, minDate)).year;
        var maxHebYear = convertGerToHeb(new Date(yearNumber, monthNumber-1, maxDate)).year;

        var minHebMonthYear = minHebMonth + " " + minHebYear;
        var maxHebMonthYear = maxHebMonth + " " + maxHebYear;

        if (minHebMonthYear == maxHebMonthYear) {

            return retString + " " + maxHebMonthYear;
        } else {

            return retString + " [ " + minHebMonthYear +" / " +  maxHebMonthYear + " ]";

        }

    }

</script>

<script>
    function ChangeTitle() {

        var title = $('.k-nav-fast').text();
        var newTitle = getHebMonths(title);
        $('.k-nav-fast').text(newTitle);

    }

</script>